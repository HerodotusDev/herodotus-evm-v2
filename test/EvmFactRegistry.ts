import { ethers } from "hardhat";
import { expect } from "chai";
import {
  fieldsToSave as f,
  fields,
  toU256,
  setMmrData,
  deploy,
  KECCAK_HASHER,
} from "./utils";
import { loadFixture } from "@nomicfoundation/hardhat-network-helpers";

describe("EVM Fact Registry Ethereum Sepolia", () => {
  it("Should prove account", async () => {
    const { satellite, satelliteAddress } = await loadFixture(deploy);

    const chainId = BigInt(11155111);
    const blockNumber = BigInt(7344140);
    const mmrId = BigInt(200);
    const mmrSize = BigInt(1);
    const blockHash =
      "0xc333c02b080f9ba18c09cb87946c0a0fdf4d3ad9e804e85352d52375ab6c6713";
    const mmrRoot = BigInt(
      ethers.keccak256(toU256(mmrSize, BigInt(blockHash))),
    );

    await setMmrData(
      satelliteAddress,
      chainId,
      mmrId,
      KECCAK_HASHER,
      false,
      mmrSize,
      mmrRoot,
    );

    const account = "0xE7F48E6dCfBeA43ff5CD1F1570f6543878cCF156";
    const headerProof = {
      treeId: mmrId,
      mmrTreeSize: mmrSize,
      blockNumber,
      blockProofLeafIndex: 1,
      mmrPeaks: [blockHash],
      mmrElementInclusionProof: [],
      provenBlockHeader:
        "0xf90265a018b82986d853e1e2b7624ef9e14330dbd74bc6a15716f31ec0d2d2bfda70f281a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794455e5aa18469bc6ccef49594645666c587a3a71ba0bd8967936dcac753885027317cfb97eff8ec90bbf952c3b4308f2928dec83fdda0e4938d93eb85918eb86e0cc84339f991b5e10f186dad45fb7c1817518c38b14ea00d6d2e3378a4079d1977017eeec1ff2ec52b15e796f6335c3ca615970f816133b901008148084dcc014422899c209e829a00000149c84085135860c200843004800192148600480820025448600441215c01892314268000a12e080d071a541d2c0854631265080b4c011a705baa1a2000c89004040728013400b1e0821b02942e72d36964280f0b510d4582a7a58210a049b802e908c4806884002008981e01a908010252040483826500608808018330a012101114231402028871450f45c482085d020a60100102c44088a04b4090c8905601816660ba02308a428421b2300818898b00126a260a8ab7007606bd9dd20226645401408001a1712113442208266b4480550014610c04d45d500401a940040681aa1834cc1216680985292838490014808370100c840225510083db271c84676a77f899d883010e0b846765746888676f312e32332e31856c696e7578a037423beb31682dd753561ca8dcab7addebe125f41a93c95105b195bfd6d7d235880000000000000000850886cb2404a059574b119ccf2b9cf5a54dee5b16c4943fb661971ed77837008228e984d4d08b830a00008404e00000a0cc666c56fbf798e23edfc0b9f29910c5ac09605ad17dc3e1b648deb8534d9484",
    };
    const accountTrieProof =
      "0xf90cf4b90214f90211a0469945df530dd0e609f6c3751b5d44a13a0d4d44ed38b1c602e612118a4c5579a059b15a3b71a01aea26f32a8f49fa887962af8a6de9c38ee9b6e3ac228691a7d5a07b7f1d51a75cc62e356dadeba62668fcc94d97ec31e2eaeb75d172dee6ee3ce8a0b759b4717143429525f03f719c410a0a1f9da372394a3103a4d53a21910ef737a098dc1c2313a3facfe3534b4f60e80e5162793fd76a78d3b102d3d14c8aa5d0e7a01d28e8bbf904858b6ab27eac6656e7203d2b15970201b6244e3e047dbd76373fa07117d1b4d0a7303fd94254debb42fe2c936232ca604fcf0a2f19bea153e2b57da079a85ad53fa676f1ed07ff60007c050ce1347c3e51213860b47b4c0daac7f8cba055a70bfd42f2efae2cd24a75bc447ed3c9aa54842736af046868dc50e1ff8b04a06cdf94e6a57a5e021bfe2084eb0e5710be5ffb0d7c2ebb9e282240cdf431781da0f5e02c0fa380da34b35a710fea4f610f32d6f8d940f4198ff40a63477d7b1045a0b5f46083d1eb59792dac53934ab9fb21cdad4aefafb07494ba72c63f15b4cfeaa0edfc83c4e4dd12ef9959a24c4460102ebc8b716106434fff42f13f7b9e92fc80a042c0ae0e2903494c328319a99b997788c7c9301f420bde69866726489a0769b4a02a2bdcd3a57c3d8226cf0ab96c59533ae331965eafb68d720e831d5ed1cbd077a0faec895db2bc412218f63dcfab582cf49274a548f64eac359740b8e7dadf97c080b90214f90211a04f73baf31593646d7f329ea66dd567f5e4a295f5221cf6bc2e06d031efe9747fa06de91c39fc20af391c378fdb7879eb5f21a6a2e3f7e97477f06e873cdd36f75ea0ac0ceeb867e3ba8f356cd9506690f40a212b28d6aa1e4ad5bc9910e37787323da0c3a9bf228fcdeafa65b539d45b7dafc908be01a6c803b71d84e1843ebda0e515a0738174a789d8261c0a9ca067b7024a3f31d16f25104c24a3e3651c6325af949da0af77fbef5752f21fc4175ae2db8a7b00210d3c7d1e6fec4988e70a3f43689a82a0676130d48cabd0850f421bc796bf3ca340ee205b43b5040e86afa68988cf8e14a0b81b474918ab2dcf57cdc32726a51f237bd61ada6ff9296eded026582ea4d24da0ba4245b24cb4aa1bc233e1d932ff27298d5b5154dc7b7637f75146766c5e18bea0b2ee813cad2ea875656c2e577d88f4014060236dc2939738bc7f2321ce53d466a0fb5cc03b5bffd24ec41b14784cf017bb534f050e6fa2b7296a284af3ab07f80ea077f91ca3b48db8ccfe73567c0ac9697a99e177f82e2f1981b3cc6681209ccc6aa0e4a2967338580bf3b751792cdfc9ae5e038f73d846fa5c187c399f2b4502a447a068e4789fb88e081b0bff49392745959b6e0a78093aa78bd41bff2a260607a587a0da50e779d5a0c09a20ce1e6f0c31f213dbf9d8b9bb49aa016c50df92962d7cd3a007c14f30cba51a2a14b4d4ceb2442a0afeb5853d37647750bc100c8e885ec03280b90214f90211a00d70f64cc8d0598fae9d96003e3c6c13029d87b62c1f655b3a3cbb434f07609ca0803e63f672d25d24e27f963ba24c2c78a12984622fccfe757a6aa8150c3c8678a04d694c26bfbd2f8e04da14553a35c754c2fdaa8667cb2d09d1616fa79a5f1008a0714432f53406a988923740f0dd50f3e38c562f32041441cf9b39c83180218a5da0269b42fe786916c4338674c0d5c2b1149130d12ab5e8b710856dea04e0378a22a042950de3c6a8261fa2058262f2f82420cfaa79fe3e4262eda71662066315a09ba0f84ff75e7feed7768e18ce37159510836a2a2fd2f9ba1cbd5a9fc7fd3aeacddda00efb673ccb31d06191fbae0ba0e652410e59b4c3cfece49d3f14714158ee22e8a0200277cf2ded04fcaef1e8179a0e87b6cd79153d17f7d3b13184072d7d03a59aa00ba02d729783bea747df29984dbe748ea84fec400b6032c0d1025c89d21ac3bba0882aeba853386379b9251fc606c1c2c48e36121711562a438274fea124d96f09a04d0f96ba0836923051a6b2c2b8d6c55662cee8b37342861421512f0911ded552a0985e4bcfeb454eb210528f607ae1d54c7c97686d59285e3a7d21b97c85c5adeba0f22f29421d2cbe0f683a66ac54c1559a1d46ddc5c8288b0188418437ddd6bab6a05cca538eed6236bdaa99d3c088aa5ff85711f9b8dbc305d9f82b78b629cf4368a05ca420f32fdd3f89679e1cebac5f7e1767dafd9f76cad9d094cd911bc482a80580b90214f90211a0f3b9b5975b225b05ca6576aec666bc87ecf66e77a83fad1f71d6951665b6e46fa0a4dd629a413d700f4880a4a3b02f9ff5644a7d485f86f105198f5951ec90bbc2a02965b30a12e108a20ef2be5532316af51a96fb7e26abac564b95372aaf5221d9a0c4db4be62aa0182b6605bb3abe92d08501ca615412481d3041b25888571d65daa0c78d61428f7c60b41907143746a02301e1a8fa78c84744a3e05b23aac91a14b0a0c5d7d8b88ae2f8d409d21a62c81fa178e69c8af9788a77e632bf193d6c2773d9a020e7e714383f2d3dc73420323de3f5511461b591415972ffb423ab20dd3f9b7da0baaf02af83210146f7bea3e3d690d3392f5a8b9fee0643a85c4bc3799421e9a6a07c3a796471a1f6faad727e5a3b29f79366a8f89ea3c7c3c48c66dc9d7166b40da035bee023457a000d5c95b3ca0ccbc65793a5f62a11e58d8a3ee58b9491483919a0ad0c808f4a1553c960044157b0aba64dc53b60309010af7b45693beebbd27024a0b20fc814467924bfde6ef1c78c7c9466a93c337ad16ff8565b345d12cffeb3c3a028b414bb8d2cfa8ea604f43b83543368373dd9d0b1f23d9540270e1bf7cd25c2a0fa0e342fb64f122b76ed6b288eb6e23c4d749f6b37770cf3ccb4d80132e15dfaa03c5a10e86f58f0d84c4971a945321ba15f5d71c68a4297b0bdee8af82544ac82a0db7667c6c32d1bef32639153b9dc9659b46761cd168f12404a4a04536500025380b90214f90211a07fa39dab60c840cbf30c806b1dfeb532caab6a0ac6b07a242e002c4c4b9d4c43a06d12a5c9ccfe813fb69d0cf97d41130ec7a756afeff603411827072ce1e76169a0a61be89c4df372b93b149ee7752e334013efb4ca67a6cba4d789869ebf17361ca0323f1e2dfe69c556f42add490cc2400ae9dc1b2c58c6f2fdd8d70ed9f8b5d042a0b292d7f6e3ccb5a57a56b7089e43294dc2e2e97b7a36040cb30db2810805ec1aa0093b2e196b413ff1b1f164914fc9e0a328a672cc26d6622e0a5ddfd5073fd516a0e4ae799cdf3ecfbbb139f1b0798aeca561f7cce3f25fa72197efced6f0815566a04ed0cd9585f4b1fecf123edf0392fcfcdda16d44f87f444247ae8bb2d598bea3a06fcee4587c5be0f1fccc4845458068a67cb2660911f6b4e941d22a1355ce831fa0d107edb4bb09d3c197484b867599645c7341eb24c65b27baade98f530532a59ba0584741e15813756f24d9f5b4ef9962b7d0c053b4dfecfd09bdbf30ed43e4657ba07189e67b180034a0feb10df538bce09fc604becbd3d8755aac693608cb340038a08a6560db489a7aafb9618c01b61dfc48aaae98d932275e14fc13f84d485616cfa0eda36c81ab4657cff2bfaef33e5bba8d39eabe895ec10344499a144ba00d41d9a03ea7c77cea71ede38655d7805bf9f65cdfe7002dd708b4efacd777b467432f87a0025c1c9775ec902fa1980cc39748bfd9265cce03224ed68581aff51e1a003b0180b901b4f901b180a069feca1fa2ff2d0102f8448c27c15dc681b57baffa23721cca4c995cc640d4dda0942658b4db45765e5ac971cf05226e0b08fc551b73a42ed121abaf67a207e1f7a054426d5f5278c39d0752fc3c09bce116dc99598170e58c291ccc2fa6e601b8e1a05521baec23a63d8291aedbdaecba10e10c604c228fa42acc19cb71550eecdef3a01fcb07c5a7072a76e1a4b1f0fceaa342c4b7e6fbd25a664719ae419ed4edc3a4a0abdbee112e3a0ca07b90bd684e6a8afb090dabd2af1ac6f582f89c03ee95e030a0305b96e59503065a1be67120a1a41e3eb0c37bf119c86fe03a9115ab10b96819a0654fcdb8148d946e21579a6e274f631fd884d113d5283af8a34b61e8d0a8420ba06f9fa375cc16789904bf7cba1ad8bf2db4b18799afb587a986629fae68850b59a0a21ea78b4e4d832eaba50a25a11092f82d784322b4bc87acc1a850489d2b40a08080a07429e0c7ba3defc007778204ebc920341cf07d5e32f0bdc3b2ab881db9a2d098a028e445e18fb75ef895bac7125a4ca50c69b63fd675fb619ae1f097d07abee2fca08cd70afbf48da7f8362a54998a70d72740573e6754207d530085ca47e33635b080b853f851808080808080a023c7485b0714b441ada1b6e70900ae6f0f109630a8490602af403a9e83f372f1808080a000b616a48d4a8b711605b219546023874fc201e915cad7268a2eaf25ea01f563808080808080b873f8719d3a10723ea2905cccc0f8aca34281cff660b804844c9f6978da4d740e6ab851f84f82102389035ad8cd96416e5eeea056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";

    const expected = {
      nonce: BigInt("0x1023"),
      balance: BigInt("0x35ad8cd96416e5eee"),
      storageHash: BigInt(
        "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
      ),
      codeHash: BigInt(
        "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
      ),
    };

    await expect(
      satellite.accountField(chainId, account, blockNumber, fields.NONCE),
    ).to.be.revertedWith("STORAGE_PROOF_FIELD_NOT_SAVED");

    await expect(
      satellite.accountField(chainId, account, blockNumber, fields.BALANCE),
    ).to.be.revertedWith("STORAGE_PROOF_FIELD_NOT_SAVED");

    await expect(
      satellite.accountField(
        chainId,
        account,
        blockNumber,
        fields.STORAGE_ROOT,
      ),
    ).to.be.revertedWith("STORAGE_PROOF_FIELD_NOT_SAVED");

    await expect(
      satellite.accountField(chainId, account, blockNumber, fields.CODE_HASH),
    ).to.be.revertedWith("STORAGE_PROOF_FIELD_NOT_SAVED");

    await satellite.proveAccount(
      chainId,
      account,
      f.NONCE | f.BALANCE | f.CODE_HASH | f.STORAGE_ROOT,
      headerProof,
      accountTrieProof,
    );

    expect(
      await satellite.accountField(chainId, account, blockNumber, fields.NONCE),
    ).to.equal(toU256(expected.nonce));

    expect(
      await satellite.accountField(
        chainId,
        account,
        blockNumber,
        fields.BALANCE,
      ),
    ).to.equal(toU256(expected.balance));

    expect(
      await satellite.accountField(
        chainId,
        account,
        blockNumber,
        fields.CODE_HASH,
      ),
    ).to.equal(toU256(expected.codeHash));

    expect(
      await satellite.accountField(
        chainId,
        account,
        blockNumber,
        fields.STORAGE_ROOT,
      ),
    ).to.equal(toU256(expected.storageHash));
  });
});
